% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/geom-magnify.R, R/geom-magnify-tile.R
\name{geom_magnify}
\alias{geom_magnify}
\alias{geom_magnify_tile}
\title{Magnified inset of a plot}
\usage{
geom_magnify(
  mapping = NULL,
  data = NULL,
  stat = StatMagnify,
  position = "identity",
  ...,
  from = NULL,
  to = NULL,
  expand = TRUE,
  axes = "",
  proj = c("facing", "corresponding", "single"),
  shadow = FALSE,
  linetype = 1,
  target.linetype = linetype,
  inset.linetype = linetype,
  proj.linetype = 2,
  alpha = 1,
  linewidth = 0.4,
  shape = c("rect", "ellipse"),
  plot = NULL,
  shadow.args = list(sigma = 5, colour = "grey40", x_offset = 5, y_offset = 5),
  recompute = FALSE,
  scale.inset = 1,
  na.rm = FALSE,
  inherit.aes = FALSE
)

geom_magnify_tile(
  mapping = NULL,
  data = NULL,
  stat = StatMagnifyTile,
  position = "identity",
  ...,
  expand = TRUE,
  axes = "",
  proj = "facing",
  shadow = FALSE,
  linetype = 1,
  target.linetype = linetype,
  inset.linetype = linetype,
  proj.linetype = 2,
  alpha = 1,
  linewidth = 0.4,
  shape = "rect",
  plot = NULL,
  shadow.args = list(sigma = 5, colour = "grey40", x_offset = 5, y_offset = 5),
  recompute = FALSE,
  scale.inset = 1,
  na.rm = FALSE,
  inherit.aes = FALSE
)
}
\arguments{
\item{mapping}{Set of aesthetic mappings created by \code{\link[ggplot2:aes]{aes()}}. If specified and
\code{inherit.aes = TRUE} (the default), it is combined with the default mapping
at the top level of the plot. You must supply \code{mapping} if there is no plot
mapping.}

\item{data}{The data to be displayed in this layer. There are three
options:

If \code{NULL}, the default, the data is inherited from the plot
data as specified in the call to \code{\link[ggplot2:ggplot]{ggplot()}}.

A \code{data.frame}, or other object, will override the plot
data. All objects will be fortified to produce a data frame. See
\code{\link[ggplot2:fortify]{fortify()}} for which variables will be created.

A \code{function} will be called with a single argument,
the plot data. The return value must be a \code{data.frame}, and
will be used as the layer data. A \code{function} can be created
from a \code{formula} (e.g. \code{~ head(.x, 10)}).}

\item{stat}{The statistical transformation to use on the data for this
layer, either as a \code{ggproto} \code{Geom} subclass or as a string naming the
stat stripped of the \code{stat_} prefix (e.g. \code{"count"} rather than
\code{"stat_count"})}

\item{position}{Position adjustment, either as a string naming the adjustment
(e.g. \code{"jitter"} to use \code{position_jitter}), or the result of a call to a
position adjustment function. Use the latter if you need to change the
settings of the adjustment.}

\item{...}{Other arguments passed on to \code{\link[ggplot2:layer]{layer()}}. These are
often aesthetics, used to set an aesthetic to a fixed value, like
\code{colour = "red"} or \code{size = 3}. They may also be parameters
to the paired geom/stat.}

\item{from}{Length 4 numeric: points \verb{x0, y0, x1, y1} of the target area to magnify.}

\item{to}{Length 4 numeric: points \verb{x0, y0, x1, y1} of the magnified inset.}

\item{expand}{Logical. Expand the limits of the target area by a small factor
in the inset plot. See \link[ggplot2:coord_cartesian]{coord_cartesian()}.}

\item{axes}{String. Which axes to plot in the inset? \code{""}, \code{"x"}, \code{"y"} or
\code{"xy"}.}

\item{proj}{String. What style of projection lines to draw? \code{"facing"} (the
default), \code{"corresponding"} or \code{"single"}. Can be abbreviated. See below.}

\item{shadow}{Logical. Draw a shadow behind the inset plot? Requires the
"ggfx" package.}

\item{linetype, alpha, linewidth}{Linetype, alpha and linewidth for borders
and projection lines. Set \code{linetype = 0} for no lines.}

\item{target.linetype, inset.linetype, proj.linetype}{Linetypes
for specific components.}

\item{shape}{\code{"rect"} to magnify a rectangle. \code{"ellipse"} to magnify an ellipse.
\verb{"ellipse} requires the "ggforce" package.}

\item{plot}{Ggplot object to plot in the inset. If \code{NULL}, defaults to the
ggplot object to which \code{geom_magnify()} is added.}

\item{shadow.args}{List. Arguments to \code{\link[ggfx:with_shadow]{ggfx::with_shadow()}}.}

\item{recompute}{Logical. If \code{TRUE}, use \link[ggplot2:lims]{lims()} to
replot the inset. Statistics, e.g. smoothing lines, will be
recomputed using only the data in the target area. If \code{FALSE}, use
\link[ggplot2:coord_cartesian]{coord_cartesian()} to replot the inset,
keeping all the data.}

\item{scale.inset}{Length 1 or 2 numeric. Normally, exactly the target area
is shown on the inset. Sometimes you may wish to rescale the plot in the
inset. Use 2 numbers to scale width and height separately.}

\item{na.rm}{If \code{FALSE}, the default, missing values are removed with
a warning. If \code{TRUE}, missing values are silently removed.}

\item{inherit.aes}{If \code{FALSE}, overrides the default aesthetics,
rather than combining with them. This is most useful for helper functions
that define both data and aesthetics and shouldn't inherit behaviour from
the default plot specification, e.g. \code{\link[ggplot2:borders]{borders()}}.}
}
\description{
\code{geom_magnify()} creates a magnified inset of part of a plot. The target
area is centred at \verb{(x,y)} with \code{width} and \code{height}. The inset is centred
at \verb{(to_x,to_y)}, with \code{width} and \code{height} multiplied by \code{magnify}. Optional
borders are drawn around the target and inset, along with projection lines
from one to the other.
}
\details{
\subsection{Aesthetics}{

geom_magnify understand the following aesthetics (required aesthetics are in
bold):
\itemize{
\item \strong{xmin}
\item \strong{xmax}
\item \strong{ymin}
\item \strong{ymax}
\item \strong{to_xmin}
\item \strong{to_xmax}
\item \strong{to_ymin}
\item \strong{to_ymax}
\item colour
}

Normally you'll set these in the call to \code{geom_magnify()}, by specifying
\code{from} and \code{to}, but you can use the aesthetics to specify the magnification
area within your data, e.g. by facet. \code{from} and \code{to} override \code{xlim} etc.
and \code{to_xlim} etc. respectively.
\emph{Note:} as of today, the code only allows one magnification per panel.
}

\subsection{Projection lines}{

\code{proj = "corresponding"} or \code{"facing"} draws projection lines from the
corners of the target to the corners of the inset. \code{"corresponding"} always
projects each corner of the target to the same corner of the inset.
\code{"facing"} sometimes draws lines between facing corners, when this looks
cleaner. \code{"single"} draws a single line from the midpoint of facing sides.
\code{"none"} draws no lines.
}

\subsection{Limitations}{

\code{geom_magnify()} uses masks. This requires R version 4.2.0 or higher, and
a graphics device that supports masking. If you are using knitr, you may have
luck with the \code{ragg_png} device.

\code{geom_magnify()} uses dark magic to deal with faceting. It may break with
older (or newer!) versions of ggplot2.

By design, \code{geom_magnify()} replots the original plot using new limits. It
does not directly copy the target area pixels. The advantage is that you can
e.g. add axes, plot points at an appropriate size, or recompute derived
graphics.
}

\subsection{TODO:}{
\itemize{
\item Support for non-standard scales
}
}

\code{geom_magnify_tile()} is a version of \code{geom_magnify()} which uses different
aesthetics. Set \code{x}, \code{width}, \code{y}, \code{height} and \code{to_x}, \code{to_width} \code{to_y},
\code{to_height} to specify the target and inset location.
}
\examples{
library(ggplot2)
ggp <- ggplot(iris, aes(Sepal.Width, Sepal.Length, colour = Species)) +
         geom_point() + xlim(c(2, 6))

# Basic magnification
ggp + geom_magnify(from = c(3, 6.5, 4, 7.5),
                     to = c(4, 5, 7, 6.5))

# Inset axes
ggp + geom_magnify(from = c(3, 6.5, 4, 7.5),
                     to = c(4, 5, 7, 6.5), axes = TRUE)

# Ellipse magnification
if (requireNamespace("ggforce", quietly = TRUE) && getRversion() >= 4.2) {
  ggp + geom_magnify(from = c(3, 6.5, 4, 7.5),
                     to = c(4, 5, 7, 6.5), shape = "ellipse")
}

# Shadow
if (requireNamespace("ggfx", quietly = TRUE)) {
  ggp + geom_magnify(from = c(3, 6.5, 4, 7.5),
                     to = c(4, 5, 7, 6.5), shadow = TRUE)
}

# Order matters

# `geom_magnify()` stores the plot when it is added to it:
ggp +
  geom_smooth() +
  geom_magnify(from = c(3, 6.5, 4, 7.5),
               to = c(4, 5, 7, 6.5))

# This will print the inset without the smooth:
ggp +
  geom_magnify(from = c(3, 6.5, 4, 7.5),
               to = c(4, 5, 7, 6.5)) +
  geom_smooth()
}
