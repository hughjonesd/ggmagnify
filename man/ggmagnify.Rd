% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/ggmagnify.R
\name{ggmagnify}
\alias{ggmagnify}
\title{Add a magnified inset plot to a ggplot object}
\usage{
ggmagnify(
  plot,
  xlim,
  ylim,
  inset_xlim,
  inset_ylim,
  zoom,
  border = TRUE,
  target = TRUE,
  proj = c("facing", "corresponding", "single", "none"),
  shadow = FALSE,
  compose = TRUE,
  axes = FALSE,
  margin = if (axes) 10 else 0,
  linewidth = 0.5,
  linetype = 1,
  colour = "black",
  alpha = 1,
  inset_linewidth = linewidth,
  inset_linetype = linetype,
  inset_colour = colour,
  inset_alpha = alpha,
  proj_linewidth = linewidth,
  proj_linetype = "dashed",
  proj_colour = colour,
  proj_alpha = alpha,
  target_linewidth = linewidth,
  target_linetype = linetype,
  target_colour = colour,
  target_alpha = alpha,
  shadow_args = list(sigma = 5, colour = "grey40", x_offset = 5, y_offset = 5),
  blank = inset_blanks(axes = axes),
  inset_coord = ggplot2::coord_cartesian(xlim = xlim, ylim = ylim, expand = FALSE)
)
}
\arguments{
\item{plot}{A ggplot object.}

\item{xlim, ylim}{Limits of the area to magnify. Length 2 numeric.}

\item{inset_xlim, inset_ylim}{Position of the inset in the main graph.
Length 2 numeric.}

\item{zoom}{How much to magnify the inset by. Numeric. Specify two numbers
for separate horizontal and vertical zoom. Optional: overrides \code{inset_xlim[2]}
and \code{inset_ylim[2]}.}

\item{border}{Logical. Draw a border around the inset?}

\item{target}{Logical. Draw a border around the target area?}

\item{proj}{String. What style of projection lines to draw? \code{"facing"} (the
default), \code{"corresponding"}, \code{"single"} or \code{"none"}. Can be abbreviated.
See below.}

\item{shadow}{Logical. Draw a shadow behind the inset? Requires
the \code{ggfx} package.}

\item{compose}{Logical. If \code{TRUE}, the new elements are added to the ggplot object.
If \code{FALSE}, they are returned in a \code{GgMagnify} object, see below.}

\item{axes}{Logical. Draw axes in the inset?}

\item{margin}{Plot margin of inset. Can be a single number in "pt"
units, a length 4 numeric (top, right, bottom, left), or a
\code{\link[ggplot2:element]{ggplot2::margin()}} object. Note that this is on the scale of the
inset plot, not the outer plot.}

\item{linewidth, linetype, colour, alpha}{Parameters for inset border, target border,
and projection lines.}

\item{inset_linewidth, inset_linetype, inset_colour, inset_alpha}{Parameters
for inset border.}

\item{proj_linewidth, proj_linetype, proj_colour, proj_alpha}{Parameters
for projection lines.}

\item{target_linewidth, target_linetype, target_colour, target_alpha}{Parameters for target border.}

\item{shadow_args}{List of arguments to pass to \code{\link[ggfx:with_shadow]{ggfx::with_shadow()}}.}

\item{blank}{Character vector of theme elements to blank out in the inset.
Use \code{\link[=inset_blanks]{inset_blanks(elems, axes = axes)}} to add \code{elems}
to the default list.}

\item{inset_coord}{Result of a call to a \code{ggplot2::coord_} function to use
for the inset. Use this for plotting non-standard objects such as maps.
Overrides \code{xlim} and \code{ylim}, but note you should still provide these
separately.}
}
\value{
The modified \code{plot} if \code{compose} is \code{TRUE}. Otherwise, a \code{GgMagnify}
object.
}
\description{
\code{ggmagnify()} magnifies a target area of your plot and adds it as an inset on
top of the original plot. Optional projection lines and borders around the
target are drawn. If the \code{ggfx} package is installed, a drop shadow can be
added.
}
\details{
\subsection{Projection lines.}{

\code{proj = "corresponding"} or \code{"facing"} draws projection lines from the
corners of the target to the corners of the inset. \code{"corresponding"} always
projects each corner of the target to the same corner of the inset.
\code{"facing"} sometimes draws lines between facing corners, when this looks
cleaner. \code{"single"} draws a single line from the midpoint of facing sides.
\code{"none"} draws no lines.

If \code{compose} is \code{FALSE}, the returned \code{GgMagnify} object includes the
following list components:
\itemize{
\item \code{inset}, a ggplot object representing the inset.
\item \code{border}, a layer representing the inset border.
\item \code{target}, a layer representing the target border.
\item \code{proj}, a layer representing the projection lines.
}

You can modify these, e.g. by adding themes to the inset. Call
\code{\link[=compose]{compose(ggm, plot)}} to add the object to the plot.

To create an inset outside the plot area, set \code{coord_cartesian(clip = "off")}
in the main plot.
}

\subsection{Limitations}{

It won't work with facets. It may work with non-standard coordinates,
so long as they understand \code{x} and \code{y} aesthetics -
you'll need to use \code{inset_coord}. If it doesn't, file an issue.
}
}
\examples{
library(ggplot2)
ggp <- ggplot(ChickWeight, aes(Time, weight, group = Chick, color = Diet)) +
  geom_line()

ggmagnify(ggp,
  xlim = c(0, 5), ylim = c(25, 75),
  inset_xlim = c(0, 10), inset_ylim = c(200, 400))

ggmagnify(ggp,
  xlim = c(0, 5), ylim = c(25, 75),
  inset_xlim = c(0, 10), inset_ylim = c(200, 400),
  axes = TRUE)

if (requireNamespace("ggfx", quietly = TRUE)) {
ggmagnify(ggp,
  xlim = c(0, 5), ylim = c(25, 75),
  inset_xlim = c(0, 10), inset_ylim = c(200, 400),
  shadow = TRUE)
}


# Advanced usage

library(ggplot2)

booms <- ggplot(faithfuld, aes(waiting, eruptions)) +
         geom_contour_filled(aes(z = density)) +
         scale_fill_viridis_d(option = "B")

shadow_args <- list(
  colour = alpha("grey80", 0.8),
  x_offset = 0,
  y_offset = 0,
  sigma = 10
)

ggm <- ggmagnify(booms,
                 xlim = c(80, 92), ylim = c(4, 4.8),
                 inset_xlim = c(70, 94), inset_ylim = c(1.7, 3.3),
                 shadow = TRUE, shadow_args = shadow_args,
                 compose = FALSE, colour = "white")

# modify the inset like a ggplot object:
ggm$inset <- ggm$inset +
             geom_point(data = faithful, color = "red", fill = "white", alpha = 0.7,
                        size = 2, shape = "circle filled")


compose(ggm, booms)
}
